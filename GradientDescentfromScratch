{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30716,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-06-01T19:31:03.430337Z","iopub.execute_input":"2024-06-01T19:31:03.430732Z","iopub.status.idle":"2024-06-01T19:31:04.011359Z","shell.execute_reply.started":"2024-06-01T19:31:03.430695Z","shell.execute_reply":"2024-06-01T19:31:04.010615Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"**Square Meter vs Price**","metadata":{}},{"cell_type":"code","source":"squareMeter = [50, 60, 70, 80, 90, 55, 65, 75, 85, 95] # X value\n\nprice = [150, 180, 210, 240, 270, 165, 195, 225, 255, 285] # Y value","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:27:14.308467Z","iopub.execute_input":"2024-06-01T20:27:14.308818Z","iopub.status.idle":"2024-06-01T20:27:14.314079Z","shell.execute_reply.started":"2024-06-01T20:27:14.308793Z","shell.execute_reply":"2024-06-01T20:27:14.313089Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"sns.scatterplot(x=squareMeter, y=price)\nplt.title(\"Price vs Square Meter\")\nplt.xlabel(\"Square Meter\")\nplt.ylabel(\"Price x 1000$\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:27:32.517510Z","iopub.execute_input":"2024-06-01T20:27:32.518216Z","iopub.status.idle":"2024-06-01T20:27:32.844930Z","shell.execute_reply.started":"2024-06-01T20:27:32.518185Z","shell.execute_reply":"2024-06-01T20:27:32.843979Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'Price x 1000$')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"The **Linear Regression** formula for predicting the **y value** is:\n\n**Predicted y value** = **slope** * **x** **+** **intercept/bias**","metadata":{}},{"cell_type":"markdown","source":"In our case, the formula will be:\n\n**Predicted Price** = **slope** * **Square Meter** + **intercept**","metadata":{}},{"cell_type":"markdown","source":"We are going to be using **Residual Sum of Squares** as our *loss function*","metadata":{}},{"cell_type":"markdown","source":"We must take a random value for both of **slope** and **intercept**.","metadata":{}},{"cell_type":"code","source":"intercept = np.random.randn(1)\nslope = np.random.randn(1)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:07:03.424717Z","iopub.execute_input":"2024-06-01T20:07:03.425088Z","iopub.status.idle":"2024-06-01T20:07:03.429940Z","shell.execute_reply.started":"2024-06-01T20:07:03.425060Z","shell.execute_reply":"2024-06-01T20:07:03.429005Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"**X** is **Square Meter**\n\n**y** is **Price**","metadata":{}},{"cell_type":"code","source":"def predict(X, intercept, slope):\n    return X*slope + intercept","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:06:25.652719Z","iopub.execute_input":"2024-06-01T20:06:25.653073Z","iopub.status.idle":"2024-06-01T20:06:25.657828Z","shell.execute_reply.started":"2024-06-01T20:06:25.653048Z","shell.execute_reply":"2024-06-01T20:06:25.656751Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"def rss_errors(Y, y_pred):\n    return (Y-y_pred)**2","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:19:31.182804Z","iopub.execute_input":"2024-06-01T20:19:31.183196Z","iopub.status.idle":"2024-06-01T20:19:31.188072Z","shell.execute_reply.started":"2024-06-01T20:19:31.183170Z","shell.execute_reply":"2024-06-01T20:19:31.187102Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"def compute_rss(X,Y,intercept,slope):\n    #X is price\n    #Y is square meter\n    #y_pred is the predicted value\n    rss_total = 0\n    for i in range(len(X)):\n        y_pred = predict(X[i], intercept, slope)\n        rss_total += rss_errors(Y[i],y_pred)\n    return rss_total\n    ","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:30:13.018896Z","iopub.execute_input":"2024-06-01T20:30:13.019325Z","iopub.status.idle":"2024-06-01T20:30:13.028451Z","shell.execute_reply.started":"2024-06-01T20:30:13.019295Z","shell.execute_reply":"2024-06-01T20:30:13.027473Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"rss = compute_rss(squareMeter, price, intercept, slope)\nprint(f\"Residual Sum of Squares at the beginning: {rss}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:30:13.551075Z","iopub.execute_input":"2024-06-01T20:30:13.551449Z","iopub.status.idle":"2024-06-01T20:30:13.557596Z","shell.execute_reply.started":"2024-06-01T20:30:13.551390Z","shell.execute_reply":"2024-06-01T20:30:13.556394Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"Residual Sum of Squares at the beginning: [479843.82443889]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"We need the derivative of RSS with respect to both intercept, and slope.","metadata":{}},{"cell_type":"code","source":"def derivative_with_respect_to_intercept(Y, y_pred):\n    return -2 * (Y - y_pred)\n\ndef derivative_with_respect_to_slope(X, Y, y_pred):\n    return -2 * X * (Y - y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:51:13.066958Z","iopub.execute_input":"2024-06-01T20:51:13.067303Z","iopub.status.idle":"2024-06-01T20:51:13.072390Z","shell.execute_reply.started":"2024-06-01T20:51:13.067275Z","shell.execute_reply":"2024-06-01T20:51:13.071458Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"markdown","source":"These are the derivative points for the first index in the data set for both of **intercept**, and the **slope**:","metadata":{}},{"cell_type":"code","source":"y_pred = predict(squareMeter[0], intercept, slope)\nfirst_d_intercept = derivative_with_respect_to_intercept(price[0], y_pred)\nfirst_d_slope = derivative_with_respect_to_slope(squareMeter[0], price[0], y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:51:14.450316Z","iopub.execute_input":"2024-06-01T20:51:14.450680Z","iopub.status.idle":"2024-06-01T20:51:14.456007Z","shell.execute_reply.started":"2024-06-01T20:51:14.450647Z","shell.execute_reply":"2024-06-01T20:51:14.454880Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"print(f\"First Derivative Value for Intercept: {first_d_intercept}\")\n\nprint(f\"First Derivative Value for Slope: {first_d_slope}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:52:08.150069Z","iopub.execute_input":"2024-06-01T20:52:08.150746Z","iopub.status.idle":"2024-06-01T20:52:08.156142Z","shell.execute_reply.started":"2024-06-01T20:52:08.150716Z","shell.execute_reply":"2024-06-01T20:52:08.154977Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"First Derivative Value for Intercept: [-297.43985626]\nFirst Derivative Value for Slope: [-14871.99281283]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"We need to set up a learning rate for our algorithm.","metadata":{}},{"cell_type":"code","source":"learning_rate = 0.01","metadata":{"execution":{"iopub.status.busy":"2024-06-01T20:31:39.817899Z","iopub.execute_input":"2024-06-01T20:31:39.818281Z","iopub.status.idle":"2024-06-01T20:31:39.824678Z","shell.execute_reply.started":"2024-06-01T20:31:39.818252Z","shell.execute_reply":"2024-06-01T20:31:39.823618Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}